# ##########
# PRODUCTIONS FOR NOUNS
# ##########

#JUST A SINGLE INDEFINITE NOUN
NP[CASE=?cs] -> N[CASE=?cs]

#INDEFINITE NOUN + ADJECTIVE
NP -> N[CASE=?cs, GEN=?g] AP[CASE=?cs, GEN=?g]

#BASIC DEFINITE NOUN
#[TODO] add LEN and CAGR to all NPs
NP -> DET[CAGR=?c, CASE=?cs, GEN=?g, LEN=?l] N[CAGR=?c, CASE=?cs, GEN=?g, LEN=?l] 
#... AND WITH DEMONSTRATIVE
NP -> DET[CASE=?cs, GEN=?g] N[CASE=?cs, GEN=?g] DEMO

#BASIC DEFINITE NOUN + ADJECTIVE
NP -> DET[CASE=?cs, GEN=?g] N[CASE=?cs, GEN=?g] AdjP[CASE=?cs, GEN=?g]
#... AND WITH DEMONSTRATIVE
NP -> DET[CASE=?cs, GEN=?g] N[CASE=?cs, GEN=?g] AdjP[CASE=?cs, GEN=?g] DEMO

#CASE-SPECIFIC NPs
NP[CASE=gen] -> N NP[CASE=gen] | P[CASE=gen] NP[CASE=gen]
NP[CASE=dat] -> P[CASE=dat] NP[CASE=dat]

### VOCATIVE CASE

NP[CASE=voc] -> VOCPART N[CASE=voc] | N[CASE=voc]
VOCPART -> "a"

#[TOWRITE] LEAVING OUT plurals in the vocative case, with the exception of a few hard-coded frequently occurring
#[TODO] implement vocative in wider phrase structure
#IS VOCATIVE CASE A CASE? OR IS IT AN INTERJECTION? IT IS!
#[TODO] TREAT THEM AS VOC, BECAUSE THEY DON'T COMBINE WITH VERBS, NOUNS, AND GENERALLY DON'T PARTICIPATE IN THE SYNTAX
#JUST SAY THAT IT CAN BE AT THE BEGINNING OR AT THE END OF AN S, AND THAT'S IT.

#PROPER NOUNS
#LEAVE PROPER NOUNS OUT AND SAY WHY
#if noun is slender or ends in a vowel, and is unlenitable - it does not inflect
NPROP[GEN=fem] -> "eilidh"
NPROP[CASE=nom, GEN=fem] -> "eilidh"
NPROP[CASE=nom, GEN=masc] -> "mìcheal"

NPROP[CASE=gen, GEN=fem] -> "eilidh"
NPROP[CASE=gen, GEN=masc] -> "mìcheal"

NPROP[CASE=nom, GEN=fem] -> "eilidh"
NPROP[CASE=nom, GEN=masc] -> "mìcheal"

N[CASE=voc, GEN=masc] -> "bhalaich"
N[CASE=voc, GEN=masc] -> "ghille"
N[CASE=voc, GEN=fem] -> "chlanna"

N[CASE=voc, GEN=pl] -> "bhalaichibh"
N[CASE=voc, GEN=pl] -> "fhearibh"
N[CASE=voc, GEN=pl] -> "mhnathan"
N[CASE=nom, GEN=pl] -> "dhaoine-uaisle"

#[TOWRITE] LIMITED SUPPORT FOR RECURSION, INDICATE THIS IN THESIS - ONLY 2 NPs SIDE BY SIDE, AND ONLY 1 AP
NP -> N | PRON | PROP

#[TODO] DEF PREPROCESS FOR HOMORGANIC BLOCKING - HOW TO WORK OUT THE CONSTRAINTS?

### DETERMINERS
#[TODO] IMPLEMENT GEN=pl here as well, this will simplify things
#[Q] DO THE FEATURE VARIABLES NEED TO BE SPECIFIED ON BOTH SIDES OF THE PRODUCTION IN THIS CASE?

DET[CAGR=?c, LEN=?l] -> POSSADJ[CAGR=?c, LEN=?l]
DET[CAGR=?c, CASE=?cs, GEN=?g, LEN=?l] -> Art[CAGR=?c, CASE=?cs, GEN=?g, LEN=?l]

#I CAN'T UNDERSTAND HOW LENITION COULD BE IMPLEMENTED AS LEN1 AND LEN2

### NOMINATIVE SINGULAR
#[TOWRITE] REALLY GOOD THAT GAELIC ALWAYS HAS THE HYPHENS WITH THESE ARTICLE PREFIXES
ART[CAGR=neu, CASE=nom, GEN=masc, -LEN] -> "an"
ART[CAGR=lab, CASE=nom, GEN=masc, -LEN] -> "am"
ART[CAGR=v, CASE=nom, GEN=masc, -LEN] -> "an_t-"
#[Q][TODO] AGR ON +LEN OR SIMPLY FROM THE CASE/GENDER AGR?
ART[CAGR=neu, CASE=nom, GEN=fem, +LEN] -> "a'"
ART[CAGR=dent, CASE=nom, GEN=fem, -LEN] -> "an"
ART[CAGR=vf, CASE=nom, GEN=fem, -LEN] -> "an"

### DATIVE SINGULAR
#[TODO] DOES THE MULTIWORD FUNCTION ELIMINATE DUPLICATES? an_t-
#[Q] THIS IS NOT GOOD - IT WILL GIVE ME A SEPARATE VALID TREE WITH A FEM ARTICLE, 
#AND WITH A MASC ARTICLE, REGARDLESS OF THE GENDER OF THE NOUN? WOULD NEED GEN=?g BUT THEN WOULD MATCH SINGULAR ARTICLES WITH PLURAL 
#HOW ABOUT ADDING +/- PLURAL?
#OR WOULD MAKING GEN A FEATURE STRUCTURE MAKE SENSE?
ART[CAGR=neu, CASE=dat, GEN=fem, +LEN] -> "a'"
ART[CAGR=neu, CASE=dat, GEN=masc, +LEN] -> "a'"
#air a' chù
ART[CAGR=s, CASE=dat, GEN=fem] -> "an_t-"
ART[CAGR=s, CASE=dat, GEN=masc] -> "an_t-"

ART[CAGR=neu, CASE=gen, GEN=masc] -> "a'"

ART[CAGR=vf, CASE=nom, GEN=fem] -> "a'"
ART[CAGR=vf, CASE=dat, GEN=?g] -> "a'"
ART[CAGR=vf, CASE=gen, GEN=masc] -> "a'"

ART[CASE=gen, GEN=masc] -> "na"

#[Q] THIS IS A PROBLEM IT WILL LICENCE 'na' WITH masc.sg. NOUNS AS WELL?
ART[CAGR=neu,CASE=nom, GEN=?g] -> "na"
ART[CAGR=neu,CASE=dat, GEN=?g] -> "na"
ART[CAGR=v,CASE=nom, GEN=?g] -> "na_h-"
ART[CAGR=v,CASE=dat, GEN=?g] -> "na_h-"

ART[CAGR=neu, CASE=gen, GEN=?g] -> "nan" 
ART[CAGR=lab, CASE=gen, GEN=?g] -> "nam"

DEMO -> "seo" | "sin" | "siud" | "ud"

#OTHER NOMINALS
#[TOWRITE] +/- EMP IS ON THE SEMANTIC LAYER - SO DISREGARDED IN THIS GRAMMAR
#[TOWRITE] JUST ONE FEATURE FOR PERS+NUM+GEN...
#PRON[+EMP] ->  | "thusa" | "tusa" | "esan" | "ise" | "sinne" | "sibhse" | "iadsan"
#[TODO] rewrite the FORM feature, as a more palatable feature structure
PRON[FORM=onesg] -> "mi" | "mise"
PRON[FORM=twosg] -> "thu" | "thusa"
PRON[FORM=threesgmasc] -> "e" | "esan"
PRON[FORM=threesgfem] -> "i" | "ise"
PRON[FORM=onepl] -> "sinn" | "sinne"
PRON[FORM=twopl] -> "sibh" | "sibhse"
PRON[FORM=threepl] -> "iad" | "iadsan"

#NOUNS

# CÙ - IRREG
#every noun in the system needs to be specified for these four
N[CAGR=neu, CASE=nom, GEN=masc, -LEN] -> "cù"

#[TOWRITE] INITIAL IDEA OF: NEEDS TO BE P N[CASE=dat], BUT SOLVED AT THE TOP LEVEL: ONLY NP[CASE=nom] CAN BE A SUBJECT!
N[CAGR=neu, CASE=dat, GEN=masc, -LEN] -> "cù"

N[CAGR=neu, CASE=nom, GEN=masc, +LEN] -> "chù"
N[CAGR=neu, CASE=dat, GEN=masc, +LEN] -> "chù"

N[CAGR=neu, CASE=gen, GEN=masc, -LEN]-> "coin"
N[CAGR=neu, CASE=gen, GEN=masc, +LEN]-> "choin"

N[CAGR=neu, CASE=nom, GEN=pl, -LEN]-> "coin"
N[CAGR=neu, CASE=dat, GEN=pl, -LEN]-> "coin"

N[CAGR=neu, CASE=nom, GEN=pl, +LEN]-> "choin"
N[CAGR=neu, CASE=dat, GEN=pl, +LEN]-> "choin"

N[CAGR=neu, CASE=gen, GEN=pl, -LEN]-> "con"

#BÒ - IRREG
#[TODO] CAGR for LAB
N[CASE=nom, GEN=fem] -> "bò"
N[CASE=dat, GEN=fem] -> "bò" | "boin"

N[CASE=gen, GEN=fem]-> "bà"
N[CASE=nom, GEN=pl]-> "bà"
N[CASE=dat, GEN=pl]-> "bà"

N[CASE=gen, GEN=pl]-> "bò"

### REGULAR ###
N -> 'X'

### IRREGULAR ###
N -> 'X'